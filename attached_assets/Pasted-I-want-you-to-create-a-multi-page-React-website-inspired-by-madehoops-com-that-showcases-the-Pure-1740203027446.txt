I want you to create a multi-page React website, inspired by madehoops.com, that showcases the “Pure Game Classic” event. The site should:
	1.	Have the following pages (all accessible via a navbar):
	•	Home
	•	A hero section with the Pure Game Classic branding and a call to action (e.g., “View Participants,” “Enter Giveaway”).
	•	Basic event details (date, time, location).
	•	Players
	•	Displays all participating players, each with a card containing:
	•	Name
	•	Top accolade
	•	School they represent
	•	3-Point Contest
	•	Shows participants in the 3-point contest.
	•	Each participant card includes:
	•	Name
	•	Top accolade
	•	School
	•	Dunk Contest
	•	Shows participants in the dunk contest.
	•	Each participant card includes:
	•	Name
	•	Top accolade
	•	School
	•	All-Star Players
	•	Highlights the all-star players (e.g., “Rising Stars” vs. “Varsity”).
	•	Each card includes:
	•	Name
	•	Top accolade
	•	School
	•	Giveaway / Sign-Up
	•	A form where users can enter for a chance to win.
	•	The form must allow:
	•	Email + Password
	•	Google sign-in
	•	Apple sign-in
	•	Microsoft sign-in
	2.	Use AWS Amplify + Cognito for authentication and hosting. Specifically:
	•	Configure a Cognito User Pool to support:
	•	Email/password sign-ups.
	•	Social providers: Google, Apple, Microsoft.
	•	Integrate the frontend with Amplify Auth to handle sign-up, sign-in, sign-out, and protected routes for the giveaway form submission.
	3.	Store form submissions in an AWS backend:
	•	Use AWS Lambda + Amazon API Gateway to process and store sign-up details.
	•	Store data in Amazon DynamoDB (or show how to configure RDS if you prefer SQL).
	4.	Implement a QR code that links directly to the Giveaway / Sign-Up page:
	•	Generate a QR code for https://yourdomain.com/giveaway (or a placeholder link).
	•	Display this QR code in the Home page or in a dedicated “Scan to Enter Giveaway” section.
	5.	Styling:
	•	Use a modern UI approach (Tailwind CSS, Material UI, or Chakra UI).
	•	Match the bold, sporty branding from the provided Pure Game Classic flyers (or placeholders if you don’t have the actual files).
	•	Ensure the site is fully responsive (desktop, tablet, mobile).
	6.	Project Structure:
	•	A standard React or Next.js folder layout.
	•	For React (Create React App or Vite), example structure:

src/
  components/
    Navbar.jsx
    Footer.jsx
    PlayerCard.jsx
    ...
  pages/
    Home.jsx
    Players.jsx
    ThreePoint.jsx
    DunkContest.jsx
    AllStars.jsx
    Giveaway.jsx
    ...
  App.js
  index.js


	•	For AWS Amplify:
	•	Amplify config files (e.g., aws-exports.js)
	•	.gitignore with Amplify files

	7.	Additional Requirements:
	•	Provide clear instructions or placeholders for:
	•	Setting up environment variables (like Cognito pool IDs, region, etc.) in Replit.
	•	Deploying via Amplify (if the user wants to push code from Replit to AWS Amplify).
	•	Show a simple Lambda function example (in code or in comments) that handles a POST request from the giveaway form and writes to DynamoDB.
	•	Ensure that the site references the event date, schedule, and any relevant text from the attached flyers (e.g., “Doors Open 9:30 AM,” “Live DJ,” “Awards & Prizes”).

Deliver:
	•	A complete code scaffold in React (or Next.js) with the pages and components described above.
	•	Demonstrate how to configure Amplify Auth for email/password and social providers.
	•	Show a minimal example of a form submission to an AWS Lambda endpoint.
	•	Provide instructions for storing user data in DynamoDB (or an example if you prefer).
	•	Include a README detailing setup steps, especially focusing on Replit environment variables and the Amplify CLI configuration.

Goal: A well-structured, easy-to-extend, production-ready web application that can be hosted on AWS Amplify, with Cognito-based auth, a QR code leading to the giveaway form, and a multi-page layout highlighting the Pure Game Classic participants and events.

How to Use This Prompt
	1.	Create a new Replit project (select “Node.js,” “React,” or “Next.js” template).
	2.	Open the AI (if available in your Replit account).
	3.	Paste the entire prompt above into the AI.
	4.	Review the generated code.
	5.	Refine as needed (e.g., add your actual images, tweak styling, configure real AWS credentials).